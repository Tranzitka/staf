from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import Message
from config import BOT_TOKEN, PAYMENT_URL, ADMIN_ID
from forecast import get_forecast

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–æ–π in-memory —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö (–≤ –±–æ–µ–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ ‚Äî –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
paid_users = set()

@dp.message_handler(commands=['start'])
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø—Ä–æ–¥–∞—é—â–∏–π —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç.\n"
                         "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –Ω–∞–∂–º–∏ /buy")

@dp.message_handler(commands=['buy'])
async def buy(message: Message):
    await message.answer(f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: 100 —Ä—É–±.\n"
                         f"–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\n{PAYMENT_URL}\n\n"
                         f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ /paid")

@dp.message_handler(commands=['paid'])
async def paid(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üõ† –í—ã –∞–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /confirm <user_id> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
    else:
        await bot.send_message(ADMIN_ID, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {message.from_user.id}) —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.")
        await message.answer("‚è≥ –°–ø–∞—Å–∏–±–æ. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑.")

@dp.message_handler(commands=['confirm'])
async def confirm(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        _, user_id = message.text.strip().split()
        user_id = int(user_id)
        paid_users.add(user_id)
        await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:")
        await bot.send_message(user_id, get_forecast())
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑.")
    except Exception as e:
        await message.answer("‚ö† –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /confirm <user_id>")

@dp.message_handler(commands=['forecast'])
async def forecast(message: Message):
    if message.from_user.id in paid_users:
        await message.answer(get_forecast())
    else:
        await message.answer("üí∏ –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑. –í–≤–µ–¥–∏—Ç–µ /buy")
